using System;
using System.Collections.Generic;
using System.Linq ;
using NLog;
using NLog.Layouts;
using KayMcCormick.Test.Common;
using Xunit;
using Xunit.Abstractions;
using Xunit.Sdk;

using System.Text;
using KayMcCormick.Test.Common.Fixtures ;
using NLog.LayoutRenderers ;

namespace KayMcCormick.Logging.Common.Tests
{
    /// <summary>Tests class template<.</summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for TestClass1
    [ Collection ( "Default" ) ]    
    public class TestClass1 : IClassFixture < LoggingFixture > , IDisposable
    {
        private static Logger Logger = LogManager.GetCurrentClassLogger ( ) ;

        private readonly LoggingFixture _loggingFixture ;

        public TestClass1 ( ITestOutputHelper output , LoggingFixture loggingFixture )
        {
            _loggingFixture = loggingFixture ;
            loggingFixture.SetOutputHelper ( output ) ;
            _loggingFixture.Layout = Layout.FromString ( "${message}" ) ;
        }

        /// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        public void Dispose ( ) { _loggingFixture.SetOutputHelper ( null ) ; }

        [ Fact ( ) ]
        public void JsonFileTargetTest ( )
        {
            var jsonFileTarget =
                KayMcCormick.Logging.Common.AppLoggingConfigHelper.JsonFileTarget ( ) ;
            Assert.NotNull ( jsonFileTarget ) ;
            Assert.IsType < JsonLayout > ( jsonFileTarget.Layout ) ;
            var layout = ( JsonLayout ) jsonFileTarget.Layout ;
            List <string> rendererList = new List < string > ();
            foreach ( var layoutAttribute in layout.Attributes )
            {
                var layoutAttributeLayout = layoutAttribute.Layout ;
                switch ( layoutAttributeLayout )
                {
                    case SimpleLayout s: 
                        if(!s.IsFixedText)
                        {
                            foreach ( var layoutRenderer in s.Renderers )
                            {
                                rendererList.Add ( layoutRenderer.GetType ( ) .Name) ;
                            }
                            
                        }
                        break ;
                }
            }

            Logger.Info ( string.Join ( ", ", rendererList ) ) ;
                                      // "\n"
                                    // , layout.Attributes.Select (
                                                                // attribute
                                                                    // => $"{attribute.Name} {attribute.Layout}"
                                                               // )
                                     // )
                        // ) ;
            // Logger
            // Assert.Collection(layout.Attributes,

        }

        [ Fact ( ) ]
        public void MyFileTargetTest ( ) { }

        [ Fact ( ) ]
        public void RemoveTargetTest ( ) { }

        [ Fact ( ) ]
        public void EnsureLoggingConfiguredTest ( ) { }

        [ Fact ( ) ]
        public void AddTargetTest ( ) { }

        [ Fact ( ) ]
        public void RemoveTargetTest1 ( ) { }

        [ Fact ( ) ]
        public void SetupJsonLayoutTest ( ) { }
    }
}
